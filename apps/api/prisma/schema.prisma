// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountProvider {
  GITHUB
  FACEBOOK
  GOOGLE
  MICROSOFT
}

enum TokenType {
  PASSWORD_RECOVER
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model User {
  id           String  @id @default(uuid())
  name         String?
  email        String  @unique
  passwordHash String? @map("password_hash")
  avatarUrl    String? @map("avatar_url")
  createdAt    String? @map("created_at")
  updateAt     String? @map("update_at")

  tokens            Token[]
  accounts          Account[]
  invites           Invite[]
  member_on         Member[]
  own_organizations Organization[]
  own_projects      Project[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  createdAt String?   @map("created_at")
  type      TokenType
  user      User      @relation(fields: [userId], references: [id])

  userId String @map("user_id")

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id        String @id @default(uuid())
  email     String
  createdAt String @map("created_at")
  role      Role

  author User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String  @id @default(uuid())
  status                    Boolean @default(true)
  name                      String
  slug                      String  @unique
  domain                    String? @unique
  shouldAttachUsersByDomain Boolean @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String? @map("avatar_url")
  createdAt                 String? @map("created_at")
  updateAt                  String? @map("update_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites  Invite[]
  members  Member[]
  projects Project[]

  @@map("organizations")
}

model Project {
  id          String  @id @default(uuid())
  status      Boolean @default(true)
  description String
  name        String
  slug        String  @unique
  avatarUrl   String? @map("avatar_url")
  createdAt   String? @map("created_at")
  updateAt    String? @map("update_at")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  @@map("projects")
}
